package com.mysite.sbb.file;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.mysite.sbb.DataNotFoundException;
import com.mysite.sbb.question.Question;

import lombok.RequiredArgsConstructor;


@RequiredArgsConstructor
@Service
/**
 * 첨부파일 저장/조회/삭제 기능을 담당하는 서비스.
 * 실제 파일 시스템과 데이터베이스 메타 정보를 함께 관리한다.
 */
public class FileService {
	private final FileRepository fileRepository;
	
	@Value("${file.upload-dir}") //${file.upload-dir:${user.home}/sbb/uploads}
	private String uploadDir;
	
	/**
	 * 업로드된 `MultipartFile`을 지정 경로에 저장하고 메타데이터를 DB에 기록한다.
	 * - 저장 디렉터리가 없으면 생성한다.
	 * - 파일명이 중복되지 않도록 UUID 기반 이름을 사용한다.
	 */
	public FileAttachment saveFile(MultipartFile file, Question question) throws IOException {
		if(file.isEmpty()) {
			return null;
		}

		File directory = new File(uploadDir);
		if(!directory.exists()) {
			directory.mkdirs();
		}
		String originalFilename = file.getOriginalFilename();
		String sotredFilename = UUID.randomUUID().toString() + "_" + originalFilename;
		
		Path filePath = Paths.get(uploadDir, sotredFilename);
		Files.copy(file.getInputStream(), filePath);
		
		FileAttachment attachment = new FileAttachment();
		attachment.setOriginalFilename(originalFilename);
		attachment.setStoredFilename(sotredFilename);
		attachment.setFilePath(filePath.toString());
		attachment.setFileSize(file.getSize());
		attachment.setContentType(file.getContentType());
		attachment.setUploadDate(LocalDateTime.now());
		attachment.setQuestion(question);
		
		return fileRepository.save(attachment);
	}
	
	/**
	 * 특정 질문에 연결된 첨부파일 목록을 반환한다.
	 */
	public List<FileAttachment> getFilesByQuestion(Question question){
		return fileRepository.findByQuestion(question);
	}
	/**
	 * 파일 ID로 메타 정보를 조회한다. 존재하지 않으면 예외를 발생시킨다.
	 */
	public FileAttachment getFileById(Integer id) {
		Optional<FileAttachment> file = fileRepository.findById(id);
		if(file.isPresent()) {
			return file.get();
		} else {
			throw new DataNotFoundException("file not found");
		}
	}
	
	/**
	 * 파일 시스템과 DB에서 첨부파일을 삭제한다.
	 */
	public void deleteFile(FileAttachment file) throws IOException {
		Path filePath = Paths.get(file.getFilePath());
		Files.deleteIfExists(filePath);
		
		fileRepository.delete(file);
	}
	
}
